TL;DR: This project brings NIST SP 800-63B memorized secret requirments to 
       the registration of passwords in Microsoft Active Directory enviroments. 

NIST SP 800-63B Password Requirements:
- At least 8 Characters
- Does not appear on a blacklist

Credits:
Uses WinReg v6.1.0
Stephen Hosoms Svalinn project was referenced heavily for this project. While not copied wholesale, 
he attempts something similar and made this project much easier to implement with his as a guide. 
Uses smallsha1 from Micael Hildenborg

This project produces a DLL file that can be loaded onto domain controllers and workstations which
implement the latest NIST guidance for known secret authentication. It requires 
a minimum of 8 characters and that the password not be in a list of already 
compromised passwords. The guidance also no longer includes a password rotation 
recomendation. Rather, the implementation of compromised account detection 
mechanisims, aggressive lockout schemes when incorrect passwords are provided, 
and the lockout of accounts with risky activities detected. These latter requirements
are already implemented in Microsoft enviroments and requires systems engineering work
to implmenent. This project ONLY forces new passwords to comply with the NIST guidance.

By default, it ties into the Have I Been Pwned database and connects to their
systems to validate the password. The whole scheme is encrypted and the whole
password hash is not submitted to the service, rather the first 5 characters of
the hash are submitted, to which the server responds with a list of hashes
that it knows in its database. From there, the known hashes are processed locally
and if the user-supplied password hash is in the list of the known passwords provided
by the service, it will reject the password and have the user choose a new one. 

Beyond the in-built encryption, hashing, and k-anonymitiy features, 
should a password return a hit, it will be rejected by the system, reducing 
the security footprint of sending even the first 5 characters of a password hash
through the internet via HTTPS. You can read more about the system from the creator 
himself. https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/

This project seeks to bring the advanced password checking capabilities to the
on-prem Microsoft enviroment. 


NIST Guidance
https://pages.nist.gov/800-63-3/

Relevant sections:

5.1.1.2 Memorized Secret Verifiers

Verifiers SHALL require subscriber-chosen memorized secrets to be at least 8 characters in
length. Verifiers SHOULD permit subscriber-chosen memorized secrets at least 64 characters in
length. All printing ASCII [RFC 20] characters as well as the space character SHOULD be
acceptable in memorized secrets. Unicode [ISO/ISC 10646] characters SHOULD be accepted as
well. To make allowances for likely mistyping, verifiers MAY replace multiple consecutive
space characters with a single space character prior to verification, provided that the result is at
least 8 characters in length. Truncation of the secret SHALL NOT be performed. For purposes of
the above length requirements, each Unicode code point SHALL be counted as a single
character.

If Unicode characters are accepted in memorized secrets, the verifier SHOULD apply the
Normalization Process for Stabilized Strings using either the NFKC or NFKD normalization
defined in Section 12.1 of Unicode Standard Annex 15 [UAX 15]. This process is applied before
hashing the byte string representing the memorized secret. Subscribers choosing memorized
secrets containing Unicode characters SHOULD be advised that some characters may be
represented differently by some endpoints, which can affect their ability to authenticate
successfully.

Memorized secrets that are randomly chosen by the CSP (e.g., at enrollment) or by the verifier
(e.g., when a user requests a new PIN) SHALL be at least 6 characters in length and SHALL be
generated using an approved random bit generator [SP 800-90Ar1].
Memorized secret verifiers SHALL NOT permit the subscriber to store a “hint” that is accessible
to an unauthenticated claimant. Verifiers SHALL NOT prompt subscribers to use specific types
of information (e.g., “What was the name of your first pet?”) when choosing memorized secrets.
When processing requests to establish and change memorized secrets, verifiers SHALL compare
the prospective secrets against a list that contains values known to be commonly-used, expected,
or compromised. For example, the list MAY include, but is not limited to:

• Passwords obtained from previous breach corpuses.
• Dictionary words.
• Repetitive or sequential characters (e.g. ‘aaaaaa’, ‘1234abcd’).
• Context-specific words, such as the name of the service, the username, and derivatives
thereof.

If the chosen secret is found in the list, the CSP or verifier SHALL advise the subscriber that
they need to select a different secret, SHALL provide the reason for rejection, and SHALL
require the subscriber to choose a different value.
Verifiers SHOULD offer guidance to the subscriber, such as a password-strength meter [Meters],
to assist the user in choosing a strong memorized secret. This is particularly important following
the rejection of a memorized secret on the above list as it discourages trivial modification of
listed (and likely very weak) memorized secrets [Blacklists].
Verifiers SHALL implement a rate-limiting mechanism that effectively limits the number of
failed authentication attempts that can be made on the subscriber’s account as described
in Section 5.2.2.

Verifiers SHOULD NOT impose other composition rules (e.g., requiring mixtures of different
character types or prohibiting consecutively repeated characters) for memorized secrets.
Verifiers SHOULD NOT require memorized secrets to be changed arbitrarily (e.g., periodically).
However, verifiers SHALL force a change if there is evidence of compromise of the
authenticator.

Verifiers SHOULD permit claimants to use “paste” functionality when entering a memorized
secret. This facilitates the use of password managers, which are widely used and in many cases
increase the likelihood that users will choose stronger memorized secrets.
In order to assist the claimant in successfully entering a memorized secret, the verifier SHOULD
offer an option to display the secret — rather than a series of dots or asterisks — until it is
entered. This allows the claimant to verify their entry if they are in a location where their screen
is unlikely to be observed. The verifier MAY also permit the user’s device to display individual
entered characters for a short time after each character is typed to verify correct entry. This is
particularly applicable on mobile devices.

The verifier SHALL use approved encryption and an authenticated protected channel when
requesting memorized secrets in order to provide resistance to eavesdropping and MitM attacks.
Verifiers SHALL store memorized secrets in a form that is resistant to offline attacks.
Memorized secrets SHALL be salted and hashed using a suitable one-way key derivation
function. Key derivation functions take a password, a salt, and a cost factor as inputs then
generate a password hash. Their purpose is to make each password guessing trial by an attacker
who has obtained a password hash file expensive and therefore the cost of a guessing attack high
or prohibitive. Examples of suitable key derivation functions include Password-based Key
Derivation Function 2 (PBKDF2) [SP 800-132] and Balloon [BALLOON]. A memory-hard
function SHOULD be used because it increases the cost of an attack. The key derivation function
SHALL use an approved one-way function such as Keyed Hash Message Authentication Code
(HMAC) [FIPS 198-1], any approved hash function in SP 800-107, Secure Hash Algorithm 3
(SHA-3) [FIPS 202], CMAC [SP 800-38B] or Keccak Message Authentication Code (KMAC),
Customizable SHAKE (cSHAKE), or ParallelHash [SP 800-185]. The chosen output length of
the key derivation function SHOULD be the same as the length of the underlying one-way
function output.

The salt SHALL be at least 32 bits in length and be chosen arbitrarily so as to minimize salt
value collisions among stored hashes. Both the salt value and the resulting hash SHALL be
stored for each subscriber using a memorized secret authenticator.
For PBKDF2, the cost factor is an iteration count: the more times the PBKDF2 function is
iterated, the longer it takes to compute the password hash. Therefore, the iteration count
SHOULD be as large as verification server performance will allow, typically at least 10,000
iterations.

In addition, verifiers SHOULD perform an additional iteration of a key derivation function using
a salt value that is secret and known only to the verifier. This salt value, if used, SHALL be
generated by an approved random bit generator [SP 800-90Ar1] and provide at least the
minimum security strength specified in the latest revision of SP 800-131A (112 bits as of the
date of this publication). The secret salt value SHALL be stored separately from the hashed
memorized secrets (e.g., in a specialized device like a hardware security module). With this
additional iteration, brute-force attacks on the hashed memorized secrets are impractical as long 
as the secret salt value remains secret

